ANOTAÇÕES, DICAS ÚTEIS E CURIOSIDADES

1- Console Python > digite "Python" em um prompt

2- No console python digite "import this" 
    - Abre um ester eggs o poema de Tim Peters

3- PEP - Propostas de aprimoramento do Python
    - A ideia da PEP8 é que possamos escrever códigos Python de forma Pythônica

    [1] - Utilize Camel Case para nomes de classes;
    [2] - Utilize nomes em minusculo, separados por underline para funções ou variáveis
    [3] - Utilize quatro espaços para identação!
    [4] - Linhas em branco 
        - Separar funções e definições de classe com duas linhas em branco;
        - Métodos dentro de uma clase devem ser separados com uma única linha em branco;
    [5] - Imports devem ser sempre feitos em linhas separadas;
        - Imports sys
        - from types imports StringType, ListType
        - from types import {
            StringType,
            ListType,
            SetType,
            OutroType
        }
        - Devem ser colocados no topo do arquivio, logo depois de qualquer comentário ou docsstrings e antes de constantes ou variáveis globais
    [6] - Epaços em expressões e instruções
    [7] - Termine sempre uma instrução com uma nova linha
        
4- Entrar em um ambiente virtual de qualquer local
    - Workon <nome do ambiente virtual>

5- Utilitãrios Python para auxilio na programação

    DIR: Apresenta todos os atributos/propriedades e funções/métodos disponíveis para determinado tipo de dado ou variável

    HELP: Apresenta a documentação de como utilizar os atributos/propriedades e funções/métodos dispníveis para determinado tipo de dado ou variável

6- Substituição de valores

    ANTIGA
        > %s é usado para substituir o valor de uma variável da versão 2.x do Python antiga
            - print('A %s tem %s anos',%(nome, idade))

    NOVA
        > {} é usado em conjunto com o .format()
            - print('A {0} tem {1} anos',.format(nome, idade))

7- Exibir dados no log
    - print(f'A {nome} tem {idade} anos ')
    - print('A {nome} nasceu em {2018 -int(idade)}')

8- Cast é a conversão de um tipo de dado para outro
    - idade = input("qual sua idade")
    - int(idade)

9- INPUT(): Todo dado recebido via input é do tipo string

10- Divisão para ter resultado como inteiro
    - 5 // 2 = 2
    - 5 / 2 = 2.5

11- Resto - Resulta que resta após a Divisão
    - 4 % 2 = 0
    - 5 % 2 = 1

12- Elevação - cálculos de elevado
    - 3 ** 3 = 27
    - 2 ** 8 = 256

13- CTRL L para limpar o console python

14- No python é possível separar o milhar de valor com underline
    - 1_000_000_000

15- Para adicionar um valor em na mesma variável
    - num = 1
    - num += 1 = num = 2

16- TYPE(): para saber o tipo de dado de uma variável
    - type(idade) = <class 'int'>

17- Fazer negação de um valor,ou inversão do valor, utilize o "not"
    - valor = True
    - print(not valor)
    - False

18- Operadores de comparação em Python 
    == Igual a
    != Diferente de // ou Equivalente
    > Maior que
    < Menor que
    >= Maior ou igual a
    <= Menor ou igual a

19- Trabalhando com string
    - print(nome[0:4]) ele irá pegar as letas nas posições 0,1,2,3 e retornar como lista
    - print(nome[0:15]) para acessar até a última letra de uma string por exemplo "Geek Univesity"
    - print(nome[::-1]) Comece do primeiro elemento até o último e inverta
        - texto = "socorram me subi no onibus em marrocos"
        - print(texto[::-1]) 
    - print(nome.replace('G', 'T')) realiza a substituição das letras G por T em Geek Univesity

20- Estruturas condicionais
    - Operadores unários
        -- NOT, IS
    - OPeradores binários
        -- AND, OR

21- IF e ELSE sempre consideram como verdareiros os valores
    - if ativo and logado:
        print('Bem Vindo Usuário')

22- Diferença entre FOR e WHILE
    - FOR = Quando se há um valor inícial e um ter conclusão/termino
    - WHILE = Quando a repetição depende de uma condição para ser concluída por exemplo usando >=, <=, !=

23- Com "extend()" eu consigo inserir mais de uma valor em uma lista ao mesmo tempo

24- Acessando valores de dicionário com GET que é a forma recomendada
    - print(paises.get('br'))
    - print(paises.get('ru'))
    - Ao buscar um chave que não exista ele não irá retornar erro, mas sim a string 'None'
    - Podemos usar o get para buscar um valor e se não encontrado inserir outro <paises=paises.get('ru','Não encontrado')>

25- Tipo 'None' no Python sempre será falso

26- Formas de se adicionar valores em dicioários
    - Mais comum = receita['abril']=350
    - Forma 2
        - novo_dado ={'maio':500}
        - receita.update(novo_dado)

27- Formas de remover dados chave:valor de um dicionário
    - rem = receita.pop('mar') # ele remove e retorna o valor 
    - del receita['fev'] # se a chave não existir retornará "Key ERROR"

28- Criando chaves de dicionário e inserindo valro default
    - usuario = {}.fromkeys(['nome', 'ponto', 'email', 'profile'], 'desconhecido')
    - resultado
        {'nome': 'desconhecido', 'ponto': 'desconhecido', 'email': 'desconhecido', 'profile': 'desconhecido'}

29- Conjuntos de dados e suas caracteristicas;
    - Não possuem valores duplicados
    - Não possuem valores ordenados
    - Elementos de conjunto não são indexados
    -Utilidade
        - Útil para ser utilizado para armazenar itens, de todos os tipos, sem ordenação , duplicidades ou indexação

30- O Counter importado como "from collections import Counter", forncece um objeto aonde sua chave é o elemento da contagem e o valor o número de vezes que foi encontrado 
    - exemplo   
        - lista = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1,1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10)
        - res = Counter(lista)
        - print(res)
        - print(res.get(1))

31- Toda função que tiver 'return' pode ser utilizada diretamente em lógicas e equações
    - exemplo
        from random import random
        if random() > 0.5:
            return true
        return false

32- Diferença entre parametros e argumentos
    - Paramentros é o nome dado a dados que são necessários para o processamento da função
    - Argumentos é nome dado ao dados inseridos no uso da função 

33- Para uma função ter o uso de argumentos fora de ordem é necessário usar argumentos nomeados ou Kerword Argumentos
